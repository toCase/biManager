name: Build iOS

on:
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest
    env:
      QT_DIR: ${{ github.workspace }}/Qt
      BUILD_TYPE: Release
      APP_NAME: appTestBinance
      PROJECT_NAME: TestBinance

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install System Dependencies
      run: |
        brew update
        brew install ffmpeg

    - name: Install Python and aqtinstall
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install aqtinstall
      run: |
        python -m pip install --upgrade pip
        python -m pip install aqtinstall

    - name: Cache Qt
      uses: actions/cache@v3
      with:
        path: ${{ env.QT_DIR }}
        key: ${{ runner.os }}-qt-6.8.0-${{ hashFiles('**/CMakeLists.txt') }}

    - name: Install Qt (All)
      shell: bash
      run: |
        mkdir -p "${{ env.QT_DIR }}"
        python -m aqt install-qt \
          --outputdir "${{ env.QT_DIR }}" \
          mac desktop \
          6.8.0 \
          -m all

    - name: Install Qt for iOS
      run: |
        mkdir -p "${{ env.QT_DIR }}"
        python -m aqt install-qt \
          --outputdir "${{ env.QT_DIR }}" \
          mac ios \
          6.8.0 \
          ios \
          -m all

    - name: Check CMake Version
      run: cmake --version

    - name: Create Build Directory
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake for iOS
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: |
        export Qt6_DIR="${{ env.QT_DIR }}/6.8.0/ios/lib/cmake/Qt6"
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_PREFIX_PATH="${{ env.QT_DIR }}/6.8.0/ios" \
          -DCMAKE_TOOLCHAIN_FILE="${{ env.QT_DIR }}/6.8.0/ios/lib/cmake/Qt6/qt.toolchain.cmake" \
          -DQT_BUILD_IOS=True \
          -DQT_HOST_PATH="${{ env.QT_DIR }}/6.8.0/macos" \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=17.0 \
          -DPLATFORM=OS64 \
          -DENABLE_BITCODE=FALSE \
          -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_REQUIRED=NO \
          -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED=NO \
          -DCMAKE_XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER="com.mmtool.mmtool" \
          -DQT_NO_FFMPEG_XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY=ON \
          -G Xcode

    - name: Debug Before Build
      working-directory: ${{github.workspace}}/build
      run: |
        echo "Contents of build directory:"
        ls -la
        echo "Looking for .xcodeproj files:"
        find . -maxdepth 1 -name "*.xcodeproj"

    - name: Build iOS Bundle
      working-directory: ${{github.workspace}}/build
      shell: bash
      timeout-minutes: 30
      run: |
        if [ ! -d "${{ env.PROJECT_NAME }}.xcodeproj" ]; then
          echo "Error: ${{ env.PROJECT_NAME }}.xcodeproj not found"
          exit 1
        fi
        
        xcodebuild -project "${{ env.PROJECT_NAME }}.xcodeproj" \
          -scheme "${{ env.APP_NAME }}" \
          -configuration ${{ env.BUILD_TYPE }} \
          -destination generic/platform=iOS \
          build

    - name: Debug After Build
      working-directory: ${{github.workspace}}/build
      run: |
        echo "Build directory contents after build:"
        ls -la
        find . -name "*.app" -type d

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-ios
        path: ${{github.workspace}}/build/**/${{ env.BUILD_TYPE }}-iphoneos/${{ env.APP_NAME }}.app/