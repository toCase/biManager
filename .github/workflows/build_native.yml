name: Build Qt Project

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            qt_version: '6.8.0'
            platform: linux
            arch: gcc_64
            qt_path: gcc_64
          - os: windows-latest
            qt_version: '6.8.0'
            platform: windows
            arch: win64_msvc2022_64
            qt_path: msvc2022_64
            
          - os: macos-latest
            qt_version: '6.8.0'
            platform: mac
            arch: clang_64
            qt_path: macos

    runs-on: ${{ matrix.os }}
    env:
      QT_DIR: ${{ github.workspace }}/Qt
      BUILD_TYPE: Release
      APP_NAME: appTestBinance

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Linux Dependencies
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libgl1-mesa-dev libxkbcommon-x11-0 libpulse-dev \
        libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libfuse2

    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install aqtinstall
      run: |
        python -m pip install --upgrade pip
        python -m pip install aqtinstall

    - name: Install Qt (All)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        mkdir -p "${{ env.QT_DIR }}"
        python -m aqt install-qt \
          --outputdir "${{ env.QT_DIR }}" \
          ${{ matrix.platform }} desktop \
          ${{ matrix.qt_version }} \
          ${{ matrix.arch }} \
          -m all

    - name: Install Qt (Windows)
      if: matrix.os == 'windows-latest'
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.8.0'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        dir: '${{github.workspace}}'
        install-deps: 'true'
        modules: 'qtwebsockets qtconnectivity'
        cache: 'false'
        cache-key-prefix: 'install-qt-action'
        setup-python: 'false'

    - name: Create Build Directory
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: |
        export Qt6_DIR="${{ env.QT_DIR }}/${{ matrix.qt_version }}/${{ matrix.qt_path }}/lib/cmake/Qt6"
        cmake .. \
          -G "Visual Studio 17 2022" \
          -A x64 \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_PREFIX_PATH="${{ env.QT_DIR }}/${{ matrix.qt_version }}/${{ matrix.qt_path }}"

    - name: Configure CMake (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: |
        export Qt6_DIR="${{ env.QT_DIR }}/${{ matrix.qt_version }}/${{ matrix.qt_path }}/lib/cmake/Qt6"
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_PREFIX_PATH="${{ env.QT_DIR }}/${{ matrix.qt_version }}/${{ matrix.qt_path }}"

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config ${{ env.BUILD_TYPE }} --parallel $(nproc)

    - name: Debug Build Directory
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: |
        echo "Build directory contents:"
        ls -la
        echo "Release directory contents (if exists):"
        ls -la Release || true
        echo "Debug directory contents (if exists):"
        ls -la Debug || true

    # Packaging steps for each platform
    - name: Package (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ${{github.workspace}}/build
      shell: cmd
      run: |
        mkdir deploy
        copy ${{ env.BUILD_TYPE }}\${{ env.APP_NAME }}.exe deploy\

        if not exist "${{github.workspace}}\Qt\${{ matrix.qt_version }}\${{ matrix.qt_path }}\bin\windeployqt.exe" (
          echo "windeployqt.exe not found at the expected path!"
          exit 1
        )
        echo "windeployqt.exe found."

        "${{github.workspace}}\Qt\${{ matrix.qt_version }}\${{ matrix.qt_path }}\bin\windeployqt.exe" --dir deploy\ --qmldir ${{github.workspace}}\QML deploy\${{ env.APP_NAME }}.exe --release
        7z a -tzip ${{ env.APP_NAME }}-windows.zip .\deploy\*

    - name: Package (MacOS)
      if: matrix.os == 'macos-latest'
      working-directory: ${{github.workspace}}/build
      run: |
        "${{ env.QT_DIR }}/${{ matrix.qt_version }}/${{ matrix.qt_path }}/bin/macdeployqt" ${{ env.APP_NAME }}.app -dmg
        mv ${{ env.APP_NAME }}.dmg ${{ env.APP_NAME }}-mac.dmg

    - name: Package (Linux)
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{github.workspace}}/build
      run: |
        # Create basic AppDir structure
        mkdir -p AppDir/usr/bin
        cp ${{ env.APP_NAME }} AppDir/usr/bin/
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        cp  ${{github.workspace}}/icon.png AppDir/usr/share/icons/hicolor/256x256/apps
        
        # Create .desktop file
        mkdir -p AppDir/usr/share/applications
        cat > AppDir/usr/share/applications/${{ env.APP_NAME }}.desktop << EOF
        [Desktop Entry]
        Name=${{ env.APP_NAME }}
        Exec=${{ env.APP_NAME }}
        Icon=icon
        Type=Application
        Categories=Utility;
        EOF
        
        # Download and prepare linuxdeploy
        wget -c "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
        chmod a+x linuxdeploy-x86_64.AppImage
        
        # Set environment variables for Qt
        export PATH="${{ env.QT_DIR }}/${{ matrix.qt_version }}/${{ matrix.qt_path }}/bin:$PATH"
        export LD_LIBRARY_PATH="${{ env.QT_DIR }}/${{ matrix.qt_version }}/${{ matrix.qt_path }}/lib:$LD_LIBRARY_PATH"
        export OUTPUT="${{ env.APP_NAME }}-linux.AppImage"
        
        # Let linuxdeploy do its job
        ./linuxdeploy-x86_64.AppImage --appdir AppDir --output appimage

        # Cleanup temporary files
        rm -f linuxdeploy-x86_64.AppImage
        rm -rf AppDir

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-${{ matrix.platform }}
        path: |
          ${{github.workspace}}/build/*.zip
          ${{github.workspace}}/build/*.dmg
          ${{github.workspace}}/build/*.AppImage