name: Build Qt Project

on:
  push:
    branches: [ main ]
    paths-ignore: ['**']
    tags: ['v*']
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  check-commit:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
      - uses: actions/checkout@v4
      - id: check
        run: |
          if echo "${{ github.event.head_commit.message }}" | grep -iE "\[build\]|\[release\]"; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-commit
    if: |
      needs.check-commit.outputs.should-run == 'true' ||
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.ref, 'refs/tags/v')
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            qt_version: '6.8.0'
            platform: linux
            arch: gcc_64
            qt_dir: ${{ github.workspace }}/Qt
          # - os: windows-latest
          #   qt_version: '6.8.0'
          #   platform: windows
          #   arch: win64_msvc2019_64
          #   qt_dir: ${{ github.workspace }}/Qt
          # - os: macos-latest
          #   qt_version: '6.8.0'
          #   platform: mac
          #   arch: clang_64
          #   qt_dir: ${{ github.workspace }}/Qt

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Linux Dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libgl1-mesa-dev libxkbcommon-x11-0 libpulse-dev

    # Установка Python и aqtinstall
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install aqtinstall
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install aqtinstall

    # Создаем директорию для Qt с правильными правами
    - name: Prepare Qt installation directory
      shell: bash
      run: |
        QT_DIR=${{github.workspace}}/Qt
        mkdir -p "$QT_DIR"
        chmod 777 "$QT_DIR"
        echo "QT_DIR=$QT_DIR" >> $GITHUB_ENV

     # Отладочный вывод доступных модулей
    - name: List available Qt modules
      shell: bash
      run: |
        python3 -m aqt list-qt ${{ matrix.platform }} desktop --arch ${{ matrix.qt_version }}

    # Установка Qt
    - name: Install Qt
      shell: bash
      run: |
        python3 -m aqt install-qt --outputdir ${{ env.QT_DIR }} ${{ matrix.platform }} desktop ${{ matrix.qt_version }} 

          
    - name: Debug Qt Installation
      shell: bash
      run: |
        echo "Qt installation directory contents:"
        ls -R ${{ matrix.qt_dir }}
      

    - name: Create Build Directory
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: |
        export Qt6_DIR="${{ matrix.qt_dir }}/${{ matrix.qt_version }}/${{ matrix.arch }}/lib/cmake/Qt6"
        cmake .. -DCMAKE_BUILD_TYPE=Release -A x64 -DCMAKE_PREFIX_PATH="${{ matrix.qt_dir }}/${{ matrix.qt_version }}/${{ matrix.arch }}"

    - name: Configure CMake (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: |
        export Qt6_DIR="${{ matrix.qt_dir }}/${{ matrix.qt_version }}/${{ matrix.arch }}/lib/cmake/Qt6"
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="${{ matrix.qt_dir }}/${{ matrix.qt_version }}/${{ matrix.arch }}"

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config Release

    - name: Package (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: |
        ${{ matrix.qt_dir }}/${{ matrix.qt_version }}/${{ matrix.arch }}/bin/windeployqt.exe Release/*.exe --qmldir ../src/QML

    - name: Package (MacOS)
      if: matrix.os == 'macos-latest'
      working-directory: ${{github.workspace}}/build
      run: |
        ${{ matrix.qt_dir }}/${{ matrix.qt_version }}/${{ matrix.arch }}/bin/macdeployqt *.app -qmldir=../src/QML -dmg

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-build
        path: |
          ${{github.workspace}}/build/**/*.exe
          ${{github.workspace}}/build/**/*.app
          ${{github.workspace}}/build/**/*.dmg
          ${{github.workspace}}/build/**/*.so
          ${{github.workspace}}/build/**/*.dll