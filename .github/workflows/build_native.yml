name: Build Qt Project

on:
  push:
    branches: [ main ]
    tags: ['v*']
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  check-commit:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
      - uses: actions/checkout@v4
      - id: check
        run: |
          if echo "${{ github.event.head_commit.message }}" | grep -iE "\[build\]|\[release\]"; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-commit
    if: |
      needs.check-commit.outputs.should-run == 'true' ||
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.ref, 'refs/tags/v')
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            qt_version: '6.8.0'
            platform: linux
            arch: gcc_64
          - os: windows-latest
            qt_version: '6.8.0'
            platform: windows
            arch: win64_msvc2019_64
          - os: macos-latest
            qt_version: '6.8.0'
            platform: mac
            arch: clang_64

    runs-on: ${{ matrix.os }}
    env:
      QT_DIR: ${{ github.workspace }}/Qt
      BUILD_TYPE: Release

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Linux Dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libgl1-mesa-dev libxkbcommon-x11-0 libpulse-dev \
        libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0

    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install aqtinstall
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install aqtinstall

    - name: Install Qt
      shell: bash
      run: |
        mkdir -p "${{ env.QT_DIR }}"
        python3 -m aqt install-qt \
          --outputdir "${{ env.QT_DIR }}" \
          ${{ matrix.platform }} desktop \
          ${{ matrix.qt_version }} \          
          -m qtwebsockets qtconnectivity

    - name: Create Build Directory
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: |
        cmake .. \
          -G "Visual Studio 17 2022" \
          -A x64 \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_PREFIX_PATH="${{ env.QT_DIR }}/${{ matrix.qt_version }}/${{ matrix.arch }}"

    - name: Configure CMake (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: |
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_PREFIX_PATH="${{ env.QT_DIR }}/${{ matrix.qt_version }}/${{ matrix.arch }}"

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config ${{ env.BUILD_TYPE }} --parallel $(nproc)

    # Packaging steps for each platform
    - name: Package (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ${{github.workspace}}/build
      shell: cmd
      run: |
        mkdir deploy
        copy ${{ env.BUILD_TYPE }}\biManager.exe deploy\
        "${{ env.QT_DIR }}\${{ matrix.qt_version }}\${{ matrix.arch }}\bin\windeployqt.exe" deploy\biManager.exe --release
        7z a -tzip biManager-windows.zip .\deploy\*

    - name: Package (MacOS)
      if: matrix.os == 'macos-latest'
      working-directory: ${{github.workspace}}/build
      run: |
        "${{ env.QT_DIR }}/${{ matrix.qt_version }}/${{ matrix.arch }}/bin/macdeployqt" biManager.app -dmg
        mv biManager.dmg biManager-mac.dmg

    - name: Package (Linux)
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{github.workspace}}/build
      run: |
        mkdir -p AppDir/usr/{bin,lib,share}
        cp biManager AppDir/usr/bin/
        
        # Copy required Qt libraries and plugins
        mkdir -p AppDir/usr/lib/qt/plugins
        cp -r "${{ env.QT_DIR }}/${{ matrix.qt_version }}/${{ matrix.arch }}/plugins/"* AppDir/usr/lib/qt/plugins/
        
        # Create AppRun script
        cat > AppDir/AppRun << 'EOF'
        #!/bin/bash
        HERE="$(dirname "$(readlink -f "${0}")")"
        export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"
        export QT_PLUGIN_PATH="${HERE}/usr/lib/qt/plugins"
        exec "${HERE}/usr/bin/biManager" "$@"
        EOF
        chmod +x AppDir/AppRun
        
        # Create .desktop file
        cat > AppDir/biManager.desktop << EOF
        [Desktop Entry]
        Name=biManager
        Exec=biManager
        Icon=biManager
        Type=Application
        Categories=Utility;
        EOF
        
        # Package as AppImage
        wget -c "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
        wget -c "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"
        chmod +x linuxdeploy*.AppImage
        
        export OUTPUT="biManager-linux.AppImage"
        ./linuxdeploy-x86_64.AppImage --appdir AppDir --plugin qt --output appimage

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: biManager-${{ matrix.platform }}
        path: |
          ${{github.workspace}}/build/*.zip
          ${{github.workspace}}/build/*.dmg
          ${{github.workspace}}/build/*.AppImage